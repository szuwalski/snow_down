#if !defined(_SNOW_DOWN_)
#  define _SNOW_DOWN_

class model_data : public ad_comm{
  data_int styr;
  data_int endyr;
  data_int dat_yr;
  data_ivector years;
  data_int size_n;
  data_vector sizes;
  data_vector imm_n_obs;
  data_vector mat_n_obs;
  data_matrix imm_n_size_obs;
  data_matrix mat_n_size_obs;
  data_matrix prop_term_molt;
  data_matrix size_trans;
  data_vector sigma_numbers_imm;
  data_vector sigma_numbers_mat;
  data_number mat_eff_samp;
  data_number imm_eff_samp;
  data_vector survey_sel;
  data_vector log_mu_m_prior;
  data_number est_m_devs;
  data_number est_q_devs;
  data_number est_m_mat_devs;
  data_number est_q_mat_devs;
  data_number est_sigma_m;
  data_vector sigma_m_mu;
  data_number smooth_q_weight;
  data_number smooth_m_weight;
  data_number est_log_m_mu;
  data_number est_sigma_q;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int hessian_phase(void)
  {
    return initial_params::in_hessian_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  dvariable adromb(dvariable(model_parameters::*f)(const dvariable&), double a, double b, int ns)
  {
    using namespace std::placeholders;
    _func func = std::bind(f, this, _1);
    return function_minimizer::adromb(func, a, b, ns);
  }
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_bounded_vector log_n_imm;
  param_init_bounded_vector log_n_mat;
  param_init_bounded_dev_vector nat_m_dev;
  param_init_bounded_dev_vector nat_m_mat_dev;
  param_init_bounded_vector q_dev;
  param_init_bounded_vector q_mat_dev;
  param_init_bounded_vector log_recruits;
  param_init_bounded_vector sigma_m;
  param_init_bounded_vector log_m_mu;
  param_init_bounded_vector prop_rec;
  param_init_bounded_vector sigma_q;
  param_matrix imm_n_size_pred;
  param_matrix mat_n_size_pred;
  param_matrix nat_m;
  param_matrix nat_m_mat;
  param_matrix selectivity;
  param_matrix selectivity_mat;
  param_vector temp_imm;
  param_vector temp_mat;
  param_vector trans_imm;
  param_vector sum_imm_numbers_obs;
  param_vector sum_mat_numbers_obs;
  param_vector imm_numbers_pred;
  param_vector mat_numbers_pred;
  param_number imm_num_like;
  param_number mat_num_like;
  param_number imm_like;
  param_number mat_like;
  param_number nat_m_like;
  param_number nat_m_mat_like;
  param_number nat_m_mu_like;
  param_number nat_m_mat_mu_like;
  param_number smooth_q_like;
  param_number smooth_m_like;
  param_number q_like;
  param_number q_mat_like;
  param_stddev_vector imm_n_sd;
  param_stddev_vector mat_n_sd;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value f;
public:
  virtual void userfunction(void);
  virtual void report(const dvector& gradients);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void){}
  void evaluate_the_objective_function(void);

};
#endif
